const fs = require('fs');

// Load your recipe data (adjust path as needed)
const recipes = JSON.parse(fs.readFileSync('./recipes.json', 'utf8'));


// Words that describe packaging, sizes, units
const packagingWords = [
    "container", "canned", "package", "packages", "packet", "loaf",
    "large", "medium", "small", "jumbo", "extra",
    "can", "cans", "pounds", "pound", "ounces", "ounce", "cup", "cups",
    "slices", "slice", "teaspoons", "tablespoons", "teaspoon", "tablespoon",
    "inch", "inches", "fl", "oz", "ozs", "chunk", "square", "piece", "pieces",
];

// Words that describe prep or state
const descriptorWords = [
    "all", "root", "warm", "softened", "juiced", "seeded", "separated", "sifted",
    "divided", "clove", "blanched", "wedge", "heated", "cut into", "pitted", "halved",
    "bulk", "pre", "cubed", "cube", "thin", "mild", "pinch", "prepared", "dry", "dash",
    "or", "cut", "into", "rinsed", "beaten", "refrigerated", "chopped", "diced", "sliced",
    "shredded", "lightly", "toasted", "such", "cheerio", "optional", "mashed", "quartered", "cored",
    "wedge", "peeled", "trimmed", "halves", "cubes", "shucked", "wedges",
    "grated", "minced", "crushed", "boiled", "cooked", "thinly", "curd", "all-purpose",
    "roasted", "melted", "thawed", "cook", "serve", "packed", "coarsely", "fresh", "frozen",
    "washed", "finely", "uncooked", "whole", "drained", "and", "pre-cooked", "plus",
    "more", "if", "as", "needed", "sharp", "to taste", "for frying", "with lime juice and cilantro (such as Rotel)",
    "with", "heart toothpick", "(such as Red Gold)", "from concentrate"
];

// Build regex patterns
const packagingRegex = new RegExp(`\\b(${packagingWords.join('|')})\\b\\s?`, 'gi');
const descriptorRegex = new RegExp(`\\s*(,|\\b)(${descriptorWords.join('|')})\\b`, 'gi');



const normalize = (str) => {
    return str
        .toLowerCase()
        .replace(/[^a-z\s]/g, ' ') // remove punctuation
        .replace(/\s+/g, ' ')
        .trim();
};

function normalizePlural(ingredientName) {
    let normalized = ingredientName.toLowerCase().trim();

    const irregularPlurals = {
        "tomatoes": "tomato",
        "bananas": "banana",
        "carrots": "carrot",
        "apples": "apple",
        "potatoes": "potato",
        "peppers": "pepper",
        "breads": "bread",
        "grapes": "grape",
        "cherries": "cherry",
        "leaves": "leaf",
        "cranberries": "cranberry",
    };

    // Split the name into words
    const words = normalized.split(" ");
    const lastWord = words[words.length - 1];

    if (irregularPlurals[lastWord]) {
        words[words.length - 1] = irregularPlurals[lastWord];
    } else if (lastWord.endsWith("s") && lastWord.length > 2) {
        words[words.length - 1] = lastWord.slice(0, -1);
    }

    return words.join(" ");
}
// Assuming you already have something like this:
const normalizeIngredient = (raw) => {
    let ingredient = raw.toLowerCase().trim();

    // Remove fractions like 1 ¬Ω, 1/4, etc.
    ingredient = ingredient.replace(/(\d+(\s?\/\s?\d+)?(\s?¬Ω)?)/g, '').trim();  // This removes any fractions

    // Remove any quantity numbers (e.g., "2", "1", "¬Ω")
    ingredient = ingredient.replace(/^\d+(\.\d+)?(\s?¬Ω)?\s?/g, '').trim();

    ingredient= ingredient.replace(packagingRegex, '')
        .replace(descriptorRegex, '')
        .trim();// Remove adjectives like "Large", "Medium", "Small", etc.

    ingredient= normalize(ingredient); // Normalize the ingredient name
    ingredient= normalizePlural(ingredient); // Normalize plural forms


    return ingredient;
};

const uniqueIngredients = new Set();

recipes.forEach(recipe => {
    recipe.ingredients.forEach(raw => {
        const normalized = normalizeIngredient(raw);
        uniqueIngredients.add(normalized);
    });
});

console.log(`üîç Total unique ingredients: ${uniqueIngredients.size}`);
console.log([...uniqueIngredients].slice(200,300)); // Show first 50 if curious