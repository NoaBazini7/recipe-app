const mongoose = require("mongoose");
const fs = require("fs");
const Fuse = require("fuse.js");
const Recipe = require("../models/recipe.js");
const connectDB = require("../config/db.js");
const ingredientService = require("../services/ingredientService.js");

// --- Normalize function to help with matching ---
const normalize = (str) => {
    return str
        .toLowerCase()
        .replace(/[^a-z\s]/g, ' ') // remove punctuation
        .replace(/\s+/g, ' ')
        .trim();
};

function normalizePlural(ingredientName) {
    let normalized = ingredientName.toLowerCase().trim();

    const irregularPlurals = {
        "tomatoes": "tomato",
        "bananas": "banana",
        "carrots": "carrot",
        "apples": "apple",
        "potatoes": "potato",
        "peppers": "pepper",
        "breads": "bread",
        "grapes": "grape",
        "cherries": "cherry",
        "leaves": "leaf",
        "cranberries": "cranberry",
    };

    // Split the name into words
    const words = normalized.split(" ");
    const lastWord = words[words.length - 1];

    if (irregularPlurals[lastWord]) {
        words[words.length - 1] = irregularPlurals[lastWord];
    } else if (lastWord.endsWith("s") && lastWord.length > 2) {
        words[words.length - 1] = lastWord.slice(0, -1);
    }

    return words.join(" ");
}


// --- Clean ingredient string (remove amounts, adjectives, and common descriptors) ---
const cleanIngredient = (ingredient) => {
    // Remove fractions like 1 ¬Ω, 1/4, etc.
    ingredient = ingredient.replace(/(\d+(\s?\/\s?\d+)?(\s?¬Ω)?)/g, '').trim();  // This removes any fractions

    // Remove any quantity numbers (e.g., "2", "1", "¬Ω")
    ingredient = ingredient.replace(/^\d+(\.\d+)?(\s?¬Ω)?\s?/g, '').trim();

    // Remove adjectives like "Large", "Medium", "Small", etc.
    ingredient = ingredient.replace(/\b(container|canned|package|packet|large|medium|small|jumbo|extra|loaf|can|cans|pounds|pound|ounces|ounce|cup|cups|slices|slice|teaspoons|tablespoons|teaspoon|tablespoon|inch|inches|fl|oz|ozs|chunk|square)\b\s?/gi, '').trim();

    // Remove descriptors like "chopped", "diced", "mashed", etc.
    ingredient = ingredient.replace(/\s*(,|\b)(root|warm|softened|sifted|divided|clove|blanched|wedge|heated|creamy Italian-style|cut into|pitted|halved|bulk|pre|cubed|thin|mild|pinch|prepared|dry|dash|or|cut into cube|rinsed|beaten|chopped|diced|sliced|shredded|mashed|peeled|grated|minced|crushed|boiled|cooked|thinly|roasted|melted|thawed|cook|serve|packed|coarsely|fresh|frozen|washed|finely|uncooked|whole|seperated|drained|and|pre-cooked|plus|more|if|as|needed|sharp|to taste|for frying|with lime juice and cilantro (such as Rotel)|with|heart toothpick|(such as Red Gold)|from concentrate)\b/g, '').trim();

    ingredient= normalize(ingredient); // Normalize the ingredient name
    ingredient= normalizePlural(ingredient); // Normalize plural forms

    // Normalize spaces and convert everything to lowercase
    return ingredient.trim().toLowerCase();
};


// --- Smart ingredient matcher ---
const matchIngredient = (extractedName, ingredientList, fuse) => {
    const cleanedName = cleanIngredient(extractedName);  // Clean the ingredient before matching
    console.log(`Matching ingredient: ${cleanedName}`);
    // Try exact match first
    let exact = ingredientList.find(i => normalize(i.name) === cleanedName);
    if (exact) return exact;

    // Try partial match
    let partial = ingredientList.find(i => normalize(i.name).includes(cleanedName));
    if (partial) return partial;

    // Fallback to fuzzy matching
    const results = fuse.search(extractedName);
    return results.length > 0 ? results[0].item : null;
};

const seedRecipes = async () => {
    try {
        await connectDB();

        await Recipe.deleteMany({});
        console.log("üßπ Cleared old recipes");

        const rawData = fs.readFileSync('recipes.json', 'utf-8');
        const recipes = JSON.parse(rawData);

        const allIngredients = await ingredientService.getAllIngredients();

        const fuse = new Fuse(allIngredients, {
            keys: ['name'],
            includeScore: false,
            threshold: 0.0, // exact or very close match
            ignoreLocation: true,
            useExtendedSearch: true
        });

        for (const recipe of recipes) {
            const matchedIngredients = [];

            for (const rawIng of recipe.ingredients) {
                const matched = matchIngredient(rawIng, allIngredients, fuse);
                if (matched) {
                    matchedIngredients.push({
                        _id: matched._id,
                        name: matched.name
                    });
                }
            }

            await Recipe.insertOne(
                new Recipe({
                    title: recipe.title,
                    url: recipe.url,
                    imageUrl: recipe.imageUrl,
                    category: recipe.category,
                    rating: recipe.rating,
                    calories: recipe.calories,
                    prep_time: recipe.prep_time,
                    cook_time: recipe.cook_time,
                    total_time: recipe.total_time,
                    servings: recipe.servings,
                    kosher: recipe.kosher,
                    rawIngredients: recipe.ingredients,
                    matchedIngredients,
                    steps: recipe.steps,
                })
            );

            console.log(`‚úÖ Seeded: ${recipe.title}`);
        }

        console.log(`üéâ Done seeding ${recipes.length} recipes!`);
        process.exit(0);
    } catch (err) {
        console.error('‚ùå Seeding error:', err);
        process.exit(1);
    }
};

seedRecipes();
